<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@Title</title>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.10.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v1.10.0/mapbox-gl.css" rel="stylesheet" />
    <style>
        body
        {
            margin: 0;
            padding: 0;
        }
        #map
        {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }
    </style>
</head>
<body>
    <style>
        #map
        {
            position: absolute;
            left:20%;
            top: 0;
            bottom: 0;
            width:80%;
        }
        .map-overlay
        {
            position: absolute;
            width: 20%;
            top: 0;
            bottom: 0;
            left: 0;
            font: 12px/20px 'Helvetica Neue' , Arial, Helvetica, sans-serif;
            height: 100%;
            overflow: auto;
        }
        .map-overlay fieldset
        {
            display: none;
            background: #ddd;
            border: none;
            padding: 10px;
            margin: 0;
            overflow: hidden;
        }
        .map-overlay input
        {
            display: block;
            border: none;
            width: 100%;
            border-radius: 3px;
            padding: 10px;
            margin: 0;
            box-sizing: border-box;
        }

        .map-overlay .listing-visible
        {
            position: sticky;
            top: 0;
            background: white;
        }

        .map-overlay .listing-visible > *
        {
            display: block;
            padding: 5px 10px;
            margin: 0;
        }

        .map-overlay .listing-visible details summary
        {
            list-style: none;
            cursor: pointer;
            padding: 5px;
            background: #e4e4e4;
            color: black;
            font-size: 1rem;
            font-weight: normal;
        }

        .map-overlay .listing-visible a
        {
            display: block;
            padding: 5px 10px;
            margin: 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            color: #404;
            text-decoration: none;
        }

        .map-overlay .listing > *
        {
            display: block;
            padding: 5px 10px;
            margin: 0;
        }

        .map-overlay .listing details summary
        {
            list-style: none;
            cursor: pointer;
            padding: 5px;
            background: #e4e4e4;
            color: white;
            font-size: 1rem;
            font-weight: bold;
        }

        .map-overlay .listing a
        {
            display: block;
            padding: 5px 10px;
            margin: 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            color: #404;
            text-decoration: none;
        }

        .map-overlay .listing a:last-child
        {
            border: none;
        }

        .map-overlay .listing a:hover
        {
            background: #f0f0f0;
        }
        
        #map-F5
        {
            background: #fff;
            position: absolute;
            z-index: 1;
            top: 10px;
            left: 21%;
            width: 120px;
            border-radius: 3px;
            border: 5px solid rgba(0, 0, 0, 0.4);
            font-family: 'Open Sans' , sans-serif;
        }
        #map-F5 b
        {
            font-size: 13px;
            color: #404040;
            display: block;
            margin: 0;
            padding: 0;
            padding: 10px;
            text-decoration: none;
            border-bottom: 1px solid rgba(0, 0, 0, 0.25);
            text-align: center;
        }
        #map-F5 b:last-child
        {
            border: none;
        }
        #map-F5 b.active
        {
            background-color: #3887be;
            color: #ffffff;
        }
        #map-F5 b.active:hover
        {
            background: #3074a4;
        }
        
        #menup {
            background: #fff;
            position: absolute;
            z-index: 1;
            top: 70px;
            left: 21%;
            border-radius: 3px;
            width: 120px;
            border: 5px solid rgba(0, 0, 0, 0.4);
            font-family: 'Open Sans', sans-serif;
        }
 
        #menup b {
            font-size: 13px;
            color: #404040;
            display: block;
            margin: 0;
            padding: 0;
            padding: 10px;
            text-decoration: none;
            border-bottom: 1px solid rgba(0, 0, 0, 0.25);
            text-align: center;
        }
 
        #menup b:last-child {
            border: none;
        }
 
        #menup b:hover {
            background-color: #f8f8f8;
            color: #404040;
        }
 
        #menup b.active {
            background-color: #3887be;
            color: #ffffff;
        }
 
        #menup b.active:hover {
            background: #3074a4;
        }
    
    </style>
    <div id="map"></div>
    <div class="map-overlay">
        <div id="feature-listing-visible" class="listing-visible">
        </div>
        <div id="feature-listing" class="listing">
        </div>
    </div>
    <nav id='map-F5'></nav>
    <nav id='menup'></nav>
    <style>
    .mapboxgl-popup {
        opacity: 0.9;
    }
    </style>

    <script>

    mapboxgl.accessToken = '@accessToken';
    var coordinates = document.getElementById('coordinates');
    var map = new mapboxgl.Map({
        container: 'map',
        style: '@style',
        center: [@Center],
        zoom: @Zoom,
        maxZoom: 16,
        minZoom: 1
    });

    // 拡大・縮小・回転のコントロールを追加
    map.addControl(new mapboxgl.NavigationControl());

    // ポップアップを追加するが、まだマップには追加しない
    var popup = new mapboxgl.Popup({
        closeButton: false
    });

    // 再表示ボタンの設定
    var link = document.createElement('b');
    link.href = '#';
    link.className = 'active';
    link.textContent = '再表示';
    link.onmousedown = function(e){
        this.className = '';
        // 地図を元の位置に戻す
        map.flyTo({
            center: [@Center],
            zoom: @Zoom,
            bearing: 0,
            speed: 3,
            curve: 1,
            easing: function(t) {
                return t;
            },
            essential: true
        });
    };
    link.onmouseup = function(e){
        this.className = 'active';
    };
    var layers = document.getElementById('map-F5');
    layers.appendChild(link);

    //リストの可視/不可視の制御用
    var ListingvisibleEl = document.getElementById('feature-listing-visible');
    var listingEl = document.getElementById('feature-listing');

// データはあらかじめ変数にセットしておく
var pointAllList = @allSource;

    // 左側のリストに表示する内容を作成する
    function renderListings(features) {
        var empty = document.createElement('p');
        // 既存のリストをクリア
        ListingvisibleEl.innerHTML = '';
        listingEl.innerHTML = '';

        var strCN = '';
        var item_detail;
        var item_sum;
        var item_visible;

        //リストの可視/不可視制御用
        var item_detail_visible = document.createElement('details');
        var item_sum_visible = document.createElement('summary');
        item_sum_visible.textContent = 'コンテナ種類情報表示切替';
        item_detail_visible.appendChild(item_sum_visible);

        var cnt = 0;

        if (features.length) {
            features.forEach(function(feature) {
                var prop = feature.properties;
                var item = document.createElement('a');
                item.target = '_blank';
                
                //表示非表示用
                item_visible = document.createElement('a');
                item_visible.target = '_blank';

                var kanri_houhou = @kanriHouou

                // 緯度経度なしの場合
                if (feature.geometry.Latitude == '') {
                    var item2 = document.createElement('span');
                    item2.textContent = '緯度経度なしデータ';
                    item.appendChild(item2);
                    var item2 = document.createElement('br');
                    item.appendChild(item2);
                }

                // 重複
                var item2 = document.createElement('span');
                item2.textContent = '重複：' + prop.secchiChouhuku;
                item.appendChild(item2);
                var item2 = document.createElement('br');
                item.appendChild(item2);

                // コンテナ種類名
                var item2 = document.createElement('span');
                item2.textContent = 'コンテナ種類名：' + prop.contenaShuruiName;
                item.appendChild(item2);
                var item2 = document.createElement('br');
                item.appendChild(item2);

                // コンテナ名
                if (kanri_houhou == 2) {
                    var item2 = document.createElement('span');
                    item2.textContent = 'コンテナ名：' + prop.contenaName;
                    item.appendChild(item2);
                    var item2 = document.createElement('br');
                    item.appendChild(item2);
                }

                // 業者名
                var item2 = document.createElement('span');
                item2.textContent = '業者名：' + prop.gyoushaName;
                item.appendChild(item2);
                var item2 = document.createElement('br');
                item.appendChild(item2);

                // 現場名
                var item2 = document.createElement('span');
                item2.textContent = '現場名：' + prop.genbaName;
                item.appendChild(item2);
                var item2 = document.createElement('br');
                item.appendChild(item2);

                // 設置台数
                if (kanri_houhou == 1) {
                    var item2 = document.createElement('span');
                    item2.textContent = '設置台数：' + prop.daisuu + '台';
                    item.appendChild(item2);
                    var item2 = document.createElement('br');
                    item.appendChild(item2);
                }

                var label1 = '';
                var label2 = '';
                if (kanri_houhou == 1) {
                    label1 = '最終更新日：';
                    label2 = '無回転日数：';
                } else {
                    label1 = '設置日：';
                    label2 = '経過日数：';
                }

                // 最終更新日/設置日
                var item2 = document.createElement('span');
                item2.textContent = label1 + prop.secchiDate;
                item.appendChild(item2);
                var item2 = document.createElement('br');
                item.appendChild(item2);

                // 無回転日数/経過日数
                var item2 = document.createElement('span');
                item2.textContent = label2 + prop.daysCount + '日';
                item.appendChild(item2);
                var item2 = document.createElement('br');
                item.appendChild(item2);


                item.addEventListener('mouseover', function() {
                    if (feature.geometry.Latitude != '') {
                        // 地図上で対応する対象物をハイライトする
                        popup
                            .setLngLat(feature.geometry.coordinates)
                            .setHTML(prop.description)
                            .addTo(map);
                    }
                });
                item.addEventListener('mouseleave', function() {
                    // リストからカーソルが離れたらポップアップをリムーブ
                    popup.remove();
                });
                item.addEventListener('click', function(){
                    if (feature.geometry.Latitude != '') {
                        // リストでクリックされた地点をズームする
                        map.flyTo({
                            center: feature.geometry.coordinates,
                            zoom: 15,
                            bearing: 0,
                            speed: 1,
                            curve: 1,
                            easing: function(t) {
                                return t;
                            },
                            essential: true
                        });
                    }
                });
                /*サマリ*/

                if (strCN == prop.tabName){
                }else{
                    item_detail = document.createElement('details');
                    item_sum = document.createElement('summary');
                    item_sum.textContent = prop.tabName;
                    item_sum.style.cssText = "background:#bdbdbd;color:#000000";
                    item_detail.appendChild(item_sum);

                    //リスト表示/非表示設定用
                    var item_visible2;

                    //切替ボタンの設定
                    item_visible2 = document.createElement('button');
                    item_visible2.value = cnt+1;
                    item_visible2.textContent = '切替';
                    item_visible2.style.marginRight = "0.5rem";
                    //ボタンのクリックイベント追加
                    item_visible2.addEventListener('click', 
                        function(e){ 
                            
                            var ChangeStatus = document.getElementById('visible_status_'+ this.value);
@VisibleChange
                            ChangeStatus.style.verticalAlign = "middle";
                        }
                    );
                    item_visible.appendChild(item_visible2);

                    //ステータス文字の設定
                    item_visible2 = document.createElement('span');
                    item_visible2.textContent = '表示';
                    item_visible2.style.cssText = "color:red; font-weight:bold; font-size:15px;";
                    item_visible2.style.verticalAlign = "middle";
                    item_visible2.id = 'visible_status_'+ (cnt+1);
                    item_visible.appendChild(item_visible2);

                    item_visible2 = document.createElement('br');
                    item_visible.appendChild(item_visible2);

                    //コース名表示の設定
                    item_visible2 = document.createElement('span');
                    item_visible2.textContent = prop.tabName;
                    item_visible2.style.verticalAlign = "middle";
                    item_visible.appendChild(item_visible2);


                    item_visible2 = document.createElement('br');
                    item_visible.appendChild(item_visible2);
                    item_detail_visible.appendChild(item_visible);

                    cnt = cnt + 1;

                }
                
                item_detail.appendChild(item);

                if (strCN == prop.tabName){
                }else{
                    listingEl.appendChild(item_detail);
                    ListingvisibleEl.appendChild(item_detail_visible);
                }           

                strCN = prop.tabName;

            });

            listingEl.appendChild(item_detail);
            ListingvisibleEl.appendChild(item_detail_visible);
        }
    }

    // 文字列をtrimして小文字に変換した上で返す
    function normalize(string) {
        return string.trim().toLowerCase();
    }

    // 渡されたarrayリスト内の重複を削除して返す
    function getUniqueFeatures(array, comparatorProperty) {
        var existingFeatureKeys = {};
        var uniqueFeatures = array.filter(function(el) {
            if (existingFeatureKeys[el.properties[comparatorProperty]]) {
                return false;
            } else {
                existingFeatureKeys[el.properties[comparatorProperty]] = true;
                return true;
            }
        });
        return uniqueFeatures;
    }

// ポップアップ表示切替
@PopupSource

// 初期表示はリムーブした状態
@PopupRemove

    var toggleableLayerIds = ['　 詳細情報　　表示'];
    for (var i = 0; i < toggleableLayerIds.length; i++) {
        var id = toggleableLayerIds[i];
        var link = document.createElement('b');
        link.href = '#';
        link.className = 'active';
        link.textContent = id;
        link.onclick = function(e) {
            var clickedLayer = this.textContent;
            e.preventDefault();
            e.stopPropagation();

            if (this.className === 'active') {
                this.className = '';
                link.textContent = '　 詳細情報　　非表示';
                // 全ポップアップ表示の処理
                for (var j = 1; j < 2; j++) {
@PopupAdd
                }
            } else {
                this.className = 'active';
                link.textContent = '　 詳細情報　　表示';
                // 全ポップアップ非表示の処理
                for (var j = 1; j < 2; j++) {
@PopupRemove
                }
            }
        };

        var layers = document.getElementById('menup');
        layers.appendChild(link);
    }


    // 地図のロードイベント
    map.on('load', function() {

// ルートの表示レイヤーを追加
@Root

// コース明細のレイヤーを追加
@Cource

// コース明細用の数値表示レイヤーを追加
@NumberLayer

// マウスカーソルがマーカーに重なった時のイベント
@mouseover

// マウスカーソルがマーカーから離れた時のイベント
@mouseleave

        // 初期化時にこの関数を呼び出し
        // 空の配列を渡してからの状態をレンダリングします
        renderListings([]);

        // リストオーバーレイの機能を設定します
        renderListings(pointAllList);
    });

    </script>
</body>
</html>
