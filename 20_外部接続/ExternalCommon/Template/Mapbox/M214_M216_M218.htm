<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@Title</title>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.10.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v1.10.0/mapbox-gl.css" rel="stylesheet" />
    <style>
        body
        {
            margin: 0;
            padding: 0;
        }
        #map
        {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }
    </style>
</head>
<body>
    <style>
        #map
        {
            position: absolute;
            left: 20%;
            top: 0;
            bottom: 0;
            width: 80%;
        }
        .map-overlay
        {
            position: absolute;
            width: 20%;
            top: 0;
            bottom: 0;
            left: 0;
            font: 12px/20px 'Helvetica Neue' , Arial, Helvetica, sans-serif;
            background-color: #fff;
            max-height: 100%;
            overflow: hidden;
        }
        .map-overlay fieldset
        {
            display: none;
            background: #ddd;
            border: none;
            padding: 10px;
            margin: 0;
        }
        .map-overlay input
        {
            display: block;
            border: none;
            width: 100%;
            border-radius: 3px;
            padding: 10px;
            margin: 0;
            box-sizing: border-box;
        }
        .map-overlay .listing
        {
            overflow: auto;
            max-height: 100%;
        }
        .map-overlay .listing > *
        {
            display: block;
            padding: 5px 10px;
            margin: 0;
        }
        .map-overlay .listing a
        {
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            color: #404;
            text-decoration: none;
        }
        .map-overlay .listing a:last-child
        {
            border: none;
        }
        .map-overlay .listing a:hover
        {
            background: #f0f0f0;
        }
        
        #map-F5
        {
            background: #fff;
            position: absolute;
            z-index: 1;
            top: 10px;
            left: 21%;
            width: 120px;
            border-radius: 3px;
            border: 5px solid rgba(0, 0, 0, 0.4);
            font-family: 'Open Sans' , sans-serif;
        }
        #map-F5 b
        {
            font-size: 13px;
            color: #404040;
            display: block;
            margin: 0;
            padding: 0;
            padding: 10px;
            text-decoration: none;
            border-bottom: 1px solid rgba(0, 0, 0, 0.25);
            text-align: center;
        }
        #map-F5 b:last-child
        {
            border: none;
        }
        #map-F5 b.active
        {
            background-color: #3887be;
            color: #ffffff;
        }
        #map-F5 b.active:hover
        {
            background: #3074a4;
        }
        
        #menup {
            background: #fff;
            position: absolute;
            z-index: 1;
            top: 70px;
            left: 21%;
            border-radius: 3px;
            width: 120px;
            border: 5px solid rgba(0, 0, 0, 0.4);
            font-family: 'Open Sans', sans-serif;
        }
 
        #menup b {
            font-size: 13px;
            color: #404040;
            display: block;
            margin: 0;
            padding: 0;
            padding: 10px;
            text-decoration: none;
            border-bottom: 1px solid rgba(0, 0, 0, 0.25);
            text-align: center;
        }
 
        #menup b:last-child {
            border: none;
        }
 
        #menup b:hover {
            background-color: #f8f8f8;
            color: #404040;
        }
 
        #menup b.active {
            background-color: #3887be;
            color: #ffffff;
        }
 
        #menup b.active:hover {
            background: #3074a4;
        }
    
    </style>
    <div id="map"></div>
    <div class="map-overlay">
        <fieldset>
            <input id="feature-filter" type="text" placeholder="コードか名称でフィルタリングします" />
        </fieldset>
        <div id="feature-listing" class="listing">
        </div>
    </div>
    <nav id='map-F5'></nav>
    <nav id='menup'></nav>
    <style>
    .mapboxgl-popup {
        opacity: 0.9;
    }
    </style>

    <script>

    mapboxgl.accessToken = '@accessToken';
    var coordinates = document.getElementById('coordinates');
    var map = new mapboxgl.Map({
        container: 'map',
        style: '@style',
        center: [@Center],
        zoom: @Zoom,
        maxZoom: 16,
        minZoom: 1
    });

    // 拡大・縮小・回転のコントロールを追加
    map.addControl(new mapboxgl.NavigationControl());

    // ポップアップを追加するが、まだマップには追加しない
    var popup = new mapboxgl.Popup({
        closeButton: false
    });

    // 再表示ボタンの設定
    var link = document.createElement('b');
    link.href = '#';
    link.className = 'active';
    link.textContent = '再表示';
    link.onmousedown = function(e){
        this.className = '';
        // 地図を元の位置に戻す
        map.flyTo({
            center: [@Center],
            zoom: @Zoom,
            bearing: 0,
            speed: 3,
            curve: 1,
            easing: function(t) {
                return t;
            },
            essential: true
        });
    };
    link.onmouseup = function(e){
        this.className = 'active';
    };
    var layers = document.getElementById('map-F5');
    layers.appendChild(link);

    //var filterEl = document.getElementById('feature-filter');
    var listingEl = document.getElementById('feature-listing');

    // データはあらかじめ変数にセットしておく
    var pointArrayList = @allSource;

    // 左側のリストに表示する内容を作成する
    function renderListings(features) {
        var empty = document.createElement('p');
        // 既存のリストをクリア
        listingEl.innerHTML = '';
        if (features.length) {
            features.forEach(function(feature) {
                var prop = feature.properties;
                var item = document.createElement('a');
                item.target = '_blank';
                
                // 取引先
                if (prop.torihikisakiCd != '') {
                    var item2 = document.createElement('span');
                    item2.textContent = '取引先CD：' + prop.torihikisakiCd;
                    item.appendChild(item2);
                    var item2 = document.createElement('br');
                    item.appendChild(item2);
                    var item2 = document.createElement('span');
                    item2.textContent = '取引先名：' + prop.torihikisakiName;
                    item.appendChild(item2);
                    var item2 = document.createElement('br');
                    item.appendChild(item2);
                }
                // 業者
                if (prop.gyoushaCd != '') {
                    var item2 = document.createElement('span');
                    item2.textContent = '業者CD：' + prop.gyoushaCd;
                    item.appendChild(item2);
                    var item2 = document.createElement('br');
                    item.appendChild(item2);
                    var item2 = document.createElement('span');
                    item2.textContent = '業者名：' + prop.gyoushaName;
                    item.appendChild(item2);
                    var item2 = document.createElement('br');
                    item.appendChild(item2);
                }
                // 現場
                if (prop.genbaCd != '') {
                    var item2 = document.createElement('span');
                    item2.textContent = '現場CD：' + prop.genbaCd;
                    item.appendChild(item2);
                    var item2 = document.createElement('br');
                    item.appendChild(item2);
                    var item2 = document.createElement('span');
                    item2.textContent = '現場名：' + prop.genbaName;
                    item.appendChild(item2);
                    var item2 = document.createElement('br');
                    item.appendChild(item2);
                }
                // 住所
                var item2 = document.createElement('span');
                item2.textContent = '住　所：' + prop.address;
                item.appendChild(item2);
                var item2 = document.createElement('br');
                item.appendChild(item2);

                item.addEventListener('mouseover', function() {
                    // 地図上で対応する対象物をハイライトする
                    popup
                        .setLngLat(feature.geometry.coordinates)
                        .setHTML(prop.description)
                        .addTo(map);
                });
                item.addEventListener('mouseleave', function() {
                    // リストからカーソルが離れたらポップアップをリムーブ
                    popup.remove();
                });
                item.addEventListener('click', function(){
                    // リストでクリックされた地点をズームする
                    map.flyTo({
                        center: feature.geometry.coordinates,
                        zoom: 15,
                        bearing: 0,
                        speed: 1,
                        curve: 1,
                        easing: function(t) {
                            return t;
                        },
                        essential: true
                    });
                });
                listingEl.appendChild(item);
            });

            // フィルター入力を表示する
//            filterEl.parentNode.style.display = 'block';
        } else if (features.length === 0/* && filterEl.value !== ''*/) {
            empty.textContent = '検索結果が見つかりません';
            listingEl.appendChild(empty);
        } else {
            empty.textContent = '地図をドラッグしてください';
            listingEl.appendChild(empty);

            // フィルター入力を非表示
//            filterEl.parentNode.style.display = 'none';

            // 機能フィルターを削除
            // ◆◆◆◆ここ怪しい◆◆◆◆
            map.setFilter('airport', ['has', 'iata_code']);
        }
    }

    // 文字列をtrimして小文字に変換した上で返す
    function normalize(string) {
        return string.trim().toLowerCase();
    }

    // 渡されたarrayリスト内の重複を削除して返す
    function getUniqueFeatures(array, comparatorProperty) {
        var existingFeatureKeys = {};
        var uniqueFeatures = array.filter(function(el) {
            if (existingFeatureKeys[el.properties[comparatorProperty]]) {
                return false;
            } else {
                existingFeatureKeys[el.properties[comparatorProperty]] = true;
                return true;
            }
        });
        return uniqueFeatures;
    }

// ポップアップ表示切替
@PopupSource

// 初期表示はリムーブした状態
@PopupRemove

    var toggleableLayerIds = ['　 詳細情報　　表示'];
    for (var i = 0; i < toggleableLayerIds.length; i++) {
        var id = toggleableLayerIds[i];
        var link = document.createElement('b');
        link.href = '#';
        link.className = 'active';
        link.textContent = id;
        link.onclick = function(e) {
            var clickedLayer = this.textContent;
            e.preventDefault();
            e.stopPropagation();

            if (this.className === 'active') {
                this.className = '';
                link.textContent = '　 詳細情報　　非表示';
                // 全ポップアップ表示の処理
                for (var j = 1; j < 2; j++) {
@PopupAdd
                }
            } else {
                this.className = 'active';
                link.textContent = '　 詳細情報　　表示';
                // 全ポップアップ非表示の処理
                for (var j = 1; j < 2; j++) {
@PopupRemove
                }
            }
        };

        var layers = document.getElementById('menup');
        layers.appendChild(link);
    }


    // 地図のロードイベント
    map.on('load', function() {

// コース明細のレイヤーを追加
@Cource

// マウスカーソルがマーカーに重なった時のイベント
@mouseover

// マウスカーソルがマーカーから離れた時のイベント
@mouseleave

        // フィルタリングでキーを入力する度に発生するイベント
//        filterEl.addEventListener('keyup', function(e) {
//            var value = normalize(e.target.value);

//            // 入力値と一致しない可視フィーチャーをフィルタリングする
//            var filtered = pointArrayList.filter(function(feature) {
//                var cd1 = normalize(feature.properties.torihikisakiCd);
//                var name1 = normalize(feature.properties.torihikisakiName);
//                var cd2 = normalize(feature.properties.gyoushaCd);
//                var name2 = normalize(feature.properties.gyoushaName);
//                var cd3 = normalize(feature.properties.genbaCd);
//                var name3 = normalize(feature.properties.genbaName);
//                var address = normalize(feature.properties.address);
//                return cd1.indexOf(value) > -1 || name1.indexOf(value) > -1 || cd2.indexOf(value) > -1 || name2.indexOf(value) > -1 || address.indexOf(value) > -1 || cd3.indexOf(value) > -1 || name3.indexOf(value) > -1;
//            });

//            // フィルターされた結果をサイドバーに入力する
//            renderListings(filtered);

//            // フィルターを設定して、フィーチャーをレイヤーに入力する
//            // よくわからんがこのままでもよさそう
//            if (filtered.length) {
//                // https://docs.mapbox.com/mapbox-gl-js/api/#map#setfilter
//                map.setFilter('airport', [
//                    'match',
//                    ['get', 'iata_code'],
//                    filtered.map(function(feature) {
//                        return feature.properties.iata_code;
//                    }),
//                    true,
//                    false
//                ]);
//            }
//        });

        // 初期化時にこの関数を呼び出し
        // 空の配列を渡してからの状態をレンダリングします
        renderListings([]);

        // リストオーバーレイの機能を設定します
        renderListings(pointArrayList);

        // 入力コンテナをクリアする
//        filterEl.value = '';
    });

    </script>
</body>
</html>
